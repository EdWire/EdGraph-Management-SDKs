/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.Management.Client.Client;
using EdGraph.Management.Client.Api;
// uncomment below to import models
//using EdGraph.Management.Client.Model;

namespace EdGraph.Management.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test CreateLocalUserAsync
        /// </summary>
        [Fact]
        public void CreateLocalUserAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? apiVersion = null;
            //string? xVersion = null;
            //IdentityApiUserV1CreateLocalUserRequest? identityApiUserV1CreateLocalUserRequest = null;
            //var response = instance.CreateLocalUserAsync(apiVersion, xVersion, identityApiUserV1CreateLocalUserRequest);
            //Assert.IsType<IdentityApiUserV1LocalUserCreatedResponse>(response);
        }

        /// <summary>
        /// Test DeleteUserAsync
        /// </summary>
        [Fact]
        public void DeleteUserAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //instance.DeleteUserAsync(userId, apiVersion, xVersion);
        }

        /// <summary>
        /// Test DisableUserBrowserDebugAsync
        /// </summary>
        [Fact]
        public void DisableUserBrowserDebugAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //IdentityApiUserV1DisableUserBrowserDebugRequest? identityApiUserV1DisableUserBrowserDebugRequest = null;
            //var response = instance.DisableUserBrowserDebugAsync(userId, apiVersion, xVersion, identityApiUserV1DisableUserBrowserDebugRequest);
            //Assert.IsType<IdentityApiUserV1UserBrowserDebugDisabledResponse>(response);
        }

        /// <summary>
        /// Test EnableUserBrowserDebugAsync
        /// </summary>
        [Fact]
        public void EnableUserBrowserDebugAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //IdentityApiUserV1EnableUserBrowserDebugRequest? identityApiUserV1EnableUserBrowserDebugRequest = null;
            //var response = instance.EnableUserBrowserDebugAsync(userId, apiVersion, xVersion, identityApiUserV1EnableUserBrowserDebugRequest);
            //Assert.IsType<IdentityApiUserV1UserBrowserDebugEnabledResponse>(response);
        }

        /// <summary>
        /// Test GetAllUsersAsync
        /// </summary>
        [Fact]
        public void GetAllUsersAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetAllUsersAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<IdentityApiUserV1UserListResponsePaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test GetUserProfileByIdAsync
        /// </summary>
        [Fact]
        public void GetUserProfileByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetUserProfileByIdAsync(userId, apiVersion, xVersion);
            //Assert.IsType<IdentityApiUserV1UserProfileResponse>(response);
        }

        /// <summary>
        /// Test UpdateUserAsync
        /// </summary>
        [Fact]
        public void UpdateUserAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //IdentityApiUserV1UpdateUserRequest? identityApiUserV1UpdateUserRequest = null;
            //var response = instance.UpdateUserAsync(userId, apiVersion, xVersion, identityApiUserV1UpdateUserRequest);
            //Assert.IsType<IdentityApiUserV1UserUpdatedResponse>(response);
        }
    }
}
