/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EdGraph.Management.Client.Client;
using EdGraph.Management.Client.Api;
// uncomment below to import models
//using EdGraph.Management.Client.Model;

namespace EdGraph.Management.Client.Test.Api
{
    /// <summary>
    ///  Class for testing TenantsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TenantsApiTests : IDisposable
    {
        private TenantsApi instance;

        public TenantsApiTests()
        {
            instance = new TenantsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TenantsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TenantsApi
            //Assert.IsType<TenantsApi>(instance);
        }

        /// <summary>
        /// Test ActivateTenantSubscriptionAsync
        /// </summary>
        [Fact]
        public void ActivateTenantSubscriptionAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string subscriptionId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = null;
            //var response = instance.ActivateTenantSubscriptionAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1ActivateSubscriptionRequest);
            //Assert.IsType<TenantApiTenantV1SubscriptionActivatedResponse>(response);
        }

        /// <summary>
        /// Test CreateTenantApplicationAsync
        /// </summary>
        [Fact]
        public void CreateTenantApplicationAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = null;
            //var response = instance.CreateTenantApplicationAsync(tenantId, apiVersion, xVersion, applicationApiApplicationV2CreateApplicationRequest);
            //Assert.IsType<ApplicationApiApplicationV2ApplicationCreatedResponse>(response);
        }

        /// <summary>
        /// Test CreateTenantAsync
        /// </summary>
        [Fact]
        public void CreateTenantAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = null;
            //var response = instance.CreateTenantAsync(apiVersion, xVersion, tenantApiTenantV1CreateTenantRequest);
            //Assert.IsType<TenantApiTenantV1TenantCreatedResponse>(response);
        }

        /// <summary>
        /// Test CreateTenantSubscriptionAsync
        /// </summary>
        [Fact]
        public void CreateTenantSubscriptionAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = null;
            //var response = instance.CreateTenantSubscriptionAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1CreateSubscriptionRequest);
            //Assert.IsType<TenantApiTenantV1SubscriptionCreatedResponse>(response);
        }

        /// <summary>
        /// Test DeactivateTenantSubscriptionAsyncAsync
        /// </summary>
        [Fact]
        public void DeactivateTenantSubscriptionAsyncAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string subscriptionId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = null;
            //var response = instance.DeactivateTenantSubscriptionAsyncAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1DeactivateSubscriptionRequest);
            //Assert.IsType<TenantApiTenantV1SubscriptionDeactivatedResponse>(response);
        }

        /// <summary>
        /// Test DeleteApplicationAsync
        /// </summary>
        [Fact]
        public void DeleteApplicationAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string applicationId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = null;
            //instance.DeleteApplicationAsync(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2DeleteApplicationRequest);
        }

        /// <summary>
        /// Test DeleteTenantAsync
        /// </summary>
        [Fact]
        public void DeleteTenantAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = null;
            //instance.DeleteTenantAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1DeleteTenantRequest);
        }

        /// <summary>
        /// Test DeleteTenantSubscriptionAsync
        /// </summary>
        [Fact]
        public void DeleteTenantSubscriptionAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string subscriptionId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = null;
            //instance.DeleteTenantSubscriptionAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1DeleteSubscriptionRequest);
        }

        /// <summary>
        /// Test GetAllTenantSubscriptionsAsync
        /// </summary>
        [Fact]
        public void GetAllTenantSubscriptionsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetAllTenantSubscriptionsAsync(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test GetAllTenantsAsync
        /// </summary>
        [Fact]
        public void GetAllTenantsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetAllTenantsAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test GetTenantApplicationLauncherSettingsByIdAsync
        /// </summary>
        [Fact]
        public void GetTenantApplicationLauncherSettingsByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string applicationId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetTenantApplicationLauncherSettingsByIdAsync(tenantId, applicationId, apiVersion, xVersion);
            //Assert.IsType<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse>(response);
        }

        /// <summary>
        /// Test GetTenantApplicationProfileByIdAsync
        /// </summary>
        [Fact]
        public void GetTenantApplicationProfileByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string applicationId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetTenantApplicationProfileByIdAsync(tenantId, applicationId, apiVersion, xVersion);
            //Assert.IsType<ApplicationApiApplicationV2ApplicationProfileResponse>(response);
        }

        /// <summary>
        /// Test GetTenantApplicationsAsync
        /// </summary>
        [Fact]
        public void GetTenantApplicationsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //int? pageSize = null;
            //int? pageIndex = null;
            //string? orderBy = null;
            //string? filter = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetTenantApplicationsAsync(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            //Assert.IsType<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel>(response);
        }

        /// <summary>
        /// Test GetTenantByIdAsync
        /// </summary>
        [Fact]
        public void GetTenantByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetTenantByIdAsync(tenantId, apiVersion, xVersion);
            //Assert.IsType<TenantApiTenantV1TenantProfileResponse>(response);
        }

        /// <summary>
        /// Test GetTenantSubscriptionProfileByIdAsync
        /// </summary>
        [Fact]
        public void GetTenantSubscriptionProfileByIdAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string subscriptionId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.GetTenantSubscriptionProfileByIdAsync(tenantId, subscriptionId, apiVersion, xVersion);
            //Assert.IsType<TenantApiTenantV1SubscriptionProfileResponse>(response);
        }

        /// <summary>
        /// Test PublishTenantApplicationAsync
        /// </summary>
        [Fact]
        public void PublishTenantApplicationAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string applicationId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //var response = instance.PublishTenantApplicationAsync(tenantId, applicationId, apiVersion, xVersion);
            //Assert.IsType<ApplicationApiApplicationV2ApplicationPublishedResponse>(response);
        }

        /// <summary>
        /// Test RejectTenantSubscriptionAsync
        /// </summary>
        [Fact]
        public void RejectTenantSubscriptionAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string subscriptionId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = null;
            //var response = instance.RejectTenantSubscriptionAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1RejectSubscriptionRequest);
            //Assert.IsType<TenantApiTenantV1SubscriptionRejectedResponse>(response);
        }

        /// <summary>
        /// Test UpdateTenantApplicationLauncherSettingsAsync
        /// </summary>
        [Fact]
        public void UpdateTenantApplicationLauncherSettingsAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string applicationId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = null;
            //var response = instance.UpdateTenantApplicationLauncherSettingsAsync(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest);
            //Assert.IsType<ApplicationApiApplicationV2ApplicationUpdatedResponse>(response);
        }

        /// <summary>
        /// Test UpdateTenantApplicationProfileAsync
        /// </summary>
        [Fact]
        public void UpdateTenantApplicationProfileAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string applicationId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = null;
            //var response = instance.UpdateTenantApplicationProfileAsync(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2UpdateApplicationProfileRequest);
            //Assert.IsType<ApplicationApiApplicationV2ApplicationUpdatedResponse>(response);
        }

        /// <summary>
        /// Test UpdateTenantAsync
        /// </summary>
        [Fact]
        public void UpdateTenantAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = null;
            //var response = instance.UpdateTenantAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1UpdateTenantRequest);
            //Assert.IsType<TenantApiTenantV1TenantUpdatedResponse>(response);
        }

        /// <summary>
        /// Test UpdateTenantSubscriptionAsync
        /// </summary>
        [Fact]
        public void UpdateTenantSubscriptionAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string subscriptionId = null;
            //string? apiVersion = null;
            //string? xVersion = null;
            //TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = null;
            //var response = instance.UpdateTenantSubscriptionAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1UpdateSubscriptionRequest);
            //Assert.IsType<TenantApiTenantV1SubscriptionUpdatedResponse>(response);
        }
    }
}
