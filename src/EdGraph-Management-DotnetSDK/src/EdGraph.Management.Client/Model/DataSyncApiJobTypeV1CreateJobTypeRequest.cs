/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Management.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Management.Client.Model
{
    /// <summary>
    /// DataSyncApiJobTypeV1CreateJobTypeRequest
    /// </summary>
    [DataContract(Name = "DataSyncApi.JobType.V1.CreateJobTypeRequest")]
    public partial class DataSyncApiJobTypeV1CreateJobTypeRequest : IEquatable<DataSyncApiJobTypeV1CreateJobTypeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSyncApiJobTypeV1CreateJobTypeRequest" /> class.
        /// </summary>
        /// <param name="jobTypeId">jobTypeId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="jobPoints">jobPoints.</param>
        /// <param name="hasChildJobs">hasChildJobs.</param>
        /// <param name="childJobField">childJobField.</param>
        /// <param name="sourceConnectionTypeId">sourceConnectionTypeId.</param>
        /// <param name="destinationConnectionTypeId">destinationConnectionTypeId.</param>
        /// <param name="sourceConnectionRequired">sourceConnectionRequired.</param>
        /// <param name="destinationConnectionRequired">destinationConnectionRequired.</param>
        public DataSyncApiJobTypeV1CreateJobTypeRequest(string jobTypeId = default(string), string name = default(string), string description = default(string), int jobPoints = default(int), bool hasChildJobs = default(bool), string childJobField = default(string), string sourceConnectionTypeId = default(string), string destinationConnectionTypeId = default(string), bool sourceConnectionRequired = default(bool), bool destinationConnectionRequired = default(bool))
        {
            this.JobTypeId = jobTypeId;
            this.Name = name;
            this.Description = description;
            this.JobPoints = jobPoints;
            this.HasChildJobs = hasChildJobs;
            this.ChildJobField = childJobField;
            this.SourceConnectionTypeId = sourceConnectionTypeId;
            this.DestinationConnectionTypeId = destinationConnectionTypeId;
            this.SourceConnectionRequired = sourceConnectionRequired;
            this.DestinationConnectionRequired = destinationConnectionRequired;
        }

        /// <summary>
        /// Gets or Sets JobTypeId
        /// </summary>
        [DataMember(Name = "jobTypeId", EmitDefaultValue = true)]
        public string JobTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets JobPoints
        /// </summary>
        [DataMember(Name = "jobPoints", EmitDefaultValue = false)]
        public int JobPoints { get; set; }

        /// <summary>
        /// Gets or Sets HasChildJobs
        /// </summary>
        [DataMember(Name = "hasChildJobs", EmitDefaultValue = true)]
        public bool HasChildJobs { get; set; }

        /// <summary>
        /// Gets or Sets ChildJobField
        /// </summary>
        [DataMember(Name = "childJobField", EmitDefaultValue = true)]
        public string ChildJobField { get; set; }

        /// <summary>
        /// Gets or Sets SourceConnectionTypeId
        /// </summary>
        [DataMember(Name = "sourceConnectionTypeId", EmitDefaultValue = true)]
        public string SourceConnectionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationConnectionTypeId
        /// </summary>
        [DataMember(Name = "destinationConnectionTypeId", EmitDefaultValue = true)]
        public string DestinationConnectionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets SourceConnectionRequired
        /// </summary>
        [DataMember(Name = "sourceConnectionRequired", EmitDefaultValue = true)]
        public bool SourceConnectionRequired { get; set; }

        /// <summary>
        /// Gets or Sets DestinationConnectionRequired
        /// </summary>
        [DataMember(Name = "destinationConnectionRequired", EmitDefaultValue = true)]
        public bool DestinationConnectionRequired { get; set; }

        /// <summary>
        /// Gets or Sets JobMetadataFields
        /// </summary>
        [DataMember(Name = "jobMetadataFields", EmitDefaultValue = true)]
        public List<DataSyncApiJobTypeV1JobMetadataField> JobMetadataFields { get; private set; }

        /// <summary>
        /// Returns false as JobMetadataFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJobMetadataFields()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataSyncApiJobTypeV1CreateJobTypeRequest {\n");
            sb.Append("  JobTypeId: ").Append(JobTypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  JobPoints: ").Append(JobPoints).Append("\n");
            sb.Append("  HasChildJobs: ").Append(HasChildJobs).Append("\n");
            sb.Append("  ChildJobField: ").Append(ChildJobField).Append("\n");
            sb.Append("  SourceConnectionTypeId: ").Append(SourceConnectionTypeId).Append("\n");
            sb.Append("  DestinationConnectionTypeId: ").Append(DestinationConnectionTypeId).Append("\n");
            sb.Append("  SourceConnectionRequired: ").Append(SourceConnectionRequired).Append("\n");
            sb.Append("  DestinationConnectionRequired: ").Append(DestinationConnectionRequired).Append("\n");
            sb.Append("  JobMetadataFields: ").Append(JobMetadataFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSyncApiJobTypeV1CreateJobTypeRequest);
        }

        /// <summary>
        /// Returns true if DataSyncApiJobTypeV1CreateJobTypeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSyncApiJobTypeV1CreateJobTypeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSyncApiJobTypeV1CreateJobTypeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobTypeId == input.JobTypeId ||
                    (this.JobTypeId != null &&
                    this.JobTypeId.Equals(input.JobTypeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.JobPoints == input.JobPoints ||
                    this.JobPoints.Equals(input.JobPoints)
                ) && 
                (
                    this.HasChildJobs == input.HasChildJobs ||
                    this.HasChildJobs.Equals(input.HasChildJobs)
                ) && 
                (
                    this.ChildJobField == input.ChildJobField ||
                    (this.ChildJobField != null &&
                    this.ChildJobField.Equals(input.ChildJobField))
                ) && 
                (
                    this.SourceConnectionTypeId == input.SourceConnectionTypeId ||
                    (this.SourceConnectionTypeId != null &&
                    this.SourceConnectionTypeId.Equals(input.SourceConnectionTypeId))
                ) && 
                (
                    this.DestinationConnectionTypeId == input.DestinationConnectionTypeId ||
                    (this.DestinationConnectionTypeId != null &&
                    this.DestinationConnectionTypeId.Equals(input.DestinationConnectionTypeId))
                ) && 
                (
                    this.SourceConnectionRequired == input.SourceConnectionRequired ||
                    this.SourceConnectionRequired.Equals(input.SourceConnectionRequired)
                ) && 
                (
                    this.DestinationConnectionRequired == input.DestinationConnectionRequired ||
                    this.DestinationConnectionRequired.Equals(input.DestinationConnectionRequired)
                ) && 
                (
                    this.JobMetadataFields == input.JobMetadataFields ||
                    this.JobMetadataFields != null &&
                    input.JobMetadataFields != null &&
                    this.JobMetadataFields.SequenceEqual(input.JobMetadataFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.JobTypeId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobPoints.GetHashCode();
                hashCode = (hashCode * 59) + this.HasChildJobs.GetHashCode();
                if (this.ChildJobField != null)
                {
                    hashCode = (hashCode * 59) + this.ChildJobField.GetHashCode();
                }
                if (this.SourceConnectionTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceConnectionTypeId.GetHashCode();
                }
                if (this.DestinationConnectionTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationConnectionTypeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceConnectionRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.DestinationConnectionRequired.GetHashCode();
                if (this.JobMetadataFields != null)
                {
                    hashCode = (hashCode * 59) + this.JobMetadataFields.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
