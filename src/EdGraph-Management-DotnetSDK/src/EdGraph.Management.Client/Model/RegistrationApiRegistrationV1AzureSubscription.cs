/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Management.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Management.Client.Model
{
    /// <summary>
    /// RegistrationApiRegistrationV1AzureSubscription
    /// </summary>
    [DataContract(Name = "RegistrationApi.Registration.V1.AzureSubscription")]
    public partial class RegistrationApiRegistrationV1AzureSubscription : IEquatable<RegistrationApiRegistrationV1AzureSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationApiRegistrationV1AzureSubscription" /> class.
        /// </summary>
        /// <param name="subscriptionId">subscriptionId.</param>
        /// <param name="subscriptionStoragePath">subscriptionStoragePath.</param>
        /// <param name="subscriptionName">subscriptionName.</param>
        /// <param name="beneficiaryEmail">beneficiaryEmail.</param>
        /// <param name="purchaserEmail">purchaserEmail.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="isFreeTrial">isFreeTrial.</param>
        public RegistrationApiRegistrationV1AzureSubscription(string subscriptionId = default(string), string subscriptionStoragePath = default(string), string subscriptionName = default(string), string beneficiaryEmail = default(string), string purchaserEmail = default(string), string tenantId = default(string), bool isFreeTrial = default(bool))
        {
            this.SubscriptionId = subscriptionId;
            this.SubscriptionStoragePath = subscriptionStoragePath;
            this.SubscriptionName = subscriptionName;
            this.BeneficiaryEmail = beneficiaryEmail;
            this.PurchaserEmail = purchaserEmail;
            this.TenantId = tenantId;
            this.IsFreeTrial = isFreeTrial;
        }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name = "subscriptionId", EmitDefaultValue = true)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionStoragePath
        /// </summary>
        [DataMember(Name = "subscriptionStoragePath", EmitDefaultValue = true)]
        public string SubscriptionStoragePath { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionName
        /// </summary>
        [DataMember(Name = "subscriptionName", EmitDefaultValue = true)]
        public string SubscriptionName { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryEmail
        /// </summary>
        [DataMember(Name = "beneficiaryEmail", EmitDefaultValue = true)]
        public string BeneficiaryEmail { get; set; }

        /// <summary>
        /// Gets or Sets PurchaserEmail
        /// </summary>
        [DataMember(Name = "purchaserEmail", EmitDefaultValue = true)]
        public string PurchaserEmail { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationIds
        /// </summary>
        [DataMember(Name = "applicationIds", EmitDefaultValue = true)]
        public List<string> ApplicationIds { get; private set; }

        /// <summary>
        /// Returns false as ApplicationIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicationIds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets IsFreeTrial
        /// </summary>
        [DataMember(Name = "isFreeTrial", EmitDefaultValue = true)]
        public bool IsFreeTrial { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegistrationApiRegistrationV1AzureSubscription {\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionStoragePath: ").Append(SubscriptionStoragePath).Append("\n");
            sb.Append("  SubscriptionName: ").Append(SubscriptionName).Append("\n");
            sb.Append("  BeneficiaryEmail: ").Append(BeneficiaryEmail).Append("\n");
            sb.Append("  PurchaserEmail: ").Append(PurchaserEmail).Append("\n");
            sb.Append("  ApplicationIds: ").Append(ApplicationIds).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  IsFreeTrial: ").Append(IsFreeTrial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationApiRegistrationV1AzureSubscription);
        }

        /// <summary>
        /// Returns true if RegistrationApiRegistrationV1AzureSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationApiRegistrationV1AzureSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationApiRegistrationV1AzureSubscription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.SubscriptionStoragePath == input.SubscriptionStoragePath ||
                    (this.SubscriptionStoragePath != null &&
                    this.SubscriptionStoragePath.Equals(input.SubscriptionStoragePath))
                ) && 
                (
                    this.SubscriptionName == input.SubscriptionName ||
                    (this.SubscriptionName != null &&
                    this.SubscriptionName.Equals(input.SubscriptionName))
                ) && 
                (
                    this.BeneficiaryEmail == input.BeneficiaryEmail ||
                    (this.BeneficiaryEmail != null &&
                    this.BeneficiaryEmail.Equals(input.BeneficiaryEmail))
                ) && 
                (
                    this.PurchaserEmail == input.PurchaserEmail ||
                    (this.PurchaserEmail != null &&
                    this.PurchaserEmail.Equals(input.PurchaserEmail))
                ) && 
                (
                    this.ApplicationIds == input.ApplicationIds ||
                    this.ApplicationIds != null &&
                    input.ApplicationIds != null &&
                    this.ApplicationIds.SequenceEqual(input.ApplicationIds)
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.IsFreeTrial == input.IsFreeTrial ||
                    this.IsFreeTrial.Equals(input.IsFreeTrial)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubscriptionId != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionId.GetHashCode();
                }
                if (this.SubscriptionStoragePath != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionStoragePath.GetHashCode();
                }
                if (this.SubscriptionName != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionName.GetHashCode();
                }
                if (this.BeneficiaryEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BeneficiaryEmail.GetHashCode();
                }
                if (this.PurchaserEmail != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaserEmail.GetHashCode();
                }
                if (this.ApplicationIds != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationIds.GetHashCode();
                }
                if (this.TenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TenantId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFreeTrial.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
