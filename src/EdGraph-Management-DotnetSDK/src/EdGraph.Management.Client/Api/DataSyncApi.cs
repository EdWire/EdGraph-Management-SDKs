/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.Management.Client.Client;
using EdGraph.Management.Client.Client.Auth;
using EdGraph.Management.Client.Model;

namespace EdGraph.Management.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataSyncApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ConnectionTypeCreatedResponse</returns>
        DataSyncApiProviderV1ConnectionTypeCreatedResponse CreateDataSyncConnectionTypeAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ConnectionTypeCreatedResponse</returns>
        ApiResponse<DataSyncApiProviderV1ConnectionTypeCreatedResponse> CreateDataSyncConnectionTypeAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeCreatedResponse</returns>
        DataSyncApiJobTypeV1JobTypeCreatedResponse CreateDataSyncJobTypeAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeCreatedResponse</returns>
        ApiResponse<DataSyncApiJobTypeV1JobTypeCreatedResponse> CreateDataSyncJobTypeAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new profile assigned to the DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1ProfileCreatedResponse</returns>
        DataSyncApiJobTypeV1ProfileCreatedResponse CreateDataSyncProfileAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1ProfileCreatedResponse</returns>
        ApiResponse<DataSyncApiJobTypeV1ProfileCreatedResponse> CreateDataSyncProfileAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderCreatedResponse</returns>
        DataSyncApiProviderV1ProviderCreatedResponse CreateDataSyncProviderAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderCreatedResponse</returns>
        ApiResponse<DataSyncApiProviderV1ProviderCreatedResponse> CreateDataSyncProviderAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a connection type assigned to the DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataSyncConnectionTypeAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataSyncConnectionTypeAsyncWithHttpInfo(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataSyncJobTypeAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataSyncJobTypeAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a profile assigned to the DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataSyncProfileAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataSyncProfileAsyncWithHttpInfo(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataSyncProviderAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataSyncProviderAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of DataSync job types
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel</returns>
        DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel GetAllDataSyncJobTypesAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of DataSync job types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel</returns>
        ApiResponse<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel> GetAllDataSyncJobTypesAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of DataSync providers
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel</returns>
        DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel GetAllDataSyncProvidersAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of DataSync providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel</returns>
        ApiResponse<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel> GetAllDataSyncProvidersAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeProfileResponse</returns>
        DataSyncApiJobTypeV1JobTypeProfileResponse GetDataSyncJobTypeProfileByIdAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeProfileResponse</returns>
        ApiResponse<DataSyncApiJobTypeV1JobTypeProfileResponse> GetDataSyncJobTypeProfileByIdAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderProfileResponse</returns>
        DataSyncApiProviderV1ProviderProfileResponse GetDataSyncProviderProfileByIdAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderProfileResponse</returns>
        ApiResponse<DataSyncApiProviderV1ProviderProfileResponse> GetDataSyncProviderProfileByIdAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a connection type assigned to the DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ConnectionTypeUpdatedResponse</returns>
        DataSyncApiProviderV1ConnectionTypeUpdatedResponse UpdateDataSyncConnectionTypeAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ConnectionTypeUpdatedResponse</returns>
        ApiResponse<DataSyncApiProviderV1ConnectionTypeUpdatedResponse> UpdateDataSyncConnectionTypeAsyncWithHttpInfo(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates a DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeUpdatedResponse</returns>
        DataSyncApiJobTypeV1JobTypeUpdatedResponse UpdateDataSyncJobTypeAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeUpdatedResponse</returns>
        ApiResponse<DataSyncApiJobTypeV1JobTypeUpdatedResponse> UpdateDataSyncJobTypeAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates a profile assigned to the DataSync job type
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1ProfileUpdatedResponse</returns>
        DataSyncApiJobTypeV1ProfileUpdatedResponse UpdateDataSyncProfileAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1ProfileUpdatedResponse</returns>
        ApiResponse<DataSyncApiJobTypeV1ProfileUpdatedResponse> UpdateDataSyncProfileAsyncWithHttpInfo(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates a DataSync provider
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderUpdatedResponse</returns>
        DataSyncApiProviderV1ProviderUpdatedResponse UpdateDataSyncProviderAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderUpdatedResponse</returns>
        ApiResponse<DataSyncApiProviderV1ProviderUpdatedResponse> UpdateDataSyncProviderAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataSyncApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ConnectionTypeCreatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiProviderV1ConnectionTypeCreatedResponse> CreateDataSyncConnectionTypeAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ConnectionTypeCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiProviderV1ConnectionTypeCreatedResponse>> CreateDataSyncConnectionTypeAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeCreatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeCreatedResponse> CreateDataSyncJobTypeAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobTypeV1JobTypeCreatedResponse>> CreateDataSyncJobTypeAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1ProfileCreatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiJobTypeV1ProfileCreatedResponse> CreateDataSyncProfileAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1ProfileCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobTypeV1ProfileCreatedResponse>> CreateDataSyncProfileAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderCreatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderCreatedResponse> CreateDataSyncProviderAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiProviderV1ProviderCreatedResponse>> CreateDataSyncProviderAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataSyncConnectionTypeAsyncAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataSyncConnectionTypeAsyncWithHttpInfoAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataSyncJobTypeAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataSyncJobTypeAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataSyncProfileAsyncAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataSyncProfileAsyncWithHttpInfoAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataSyncProviderAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataSyncProviderAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of DataSync job types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel> GetAllDataSyncJobTypesAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of DataSync job types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel>> GetAllDataSyncJobTypesAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of DataSync providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel> GetAllDataSyncProvidersAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of DataSync providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel>> GetAllDataSyncProvidersAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeProfileResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeProfileResponse> GetDataSyncJobTypeProfileByIdAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobTypeV1JobTypeProfileResponse>> GetDataSyncJobTypeProfileByIdAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderProfileResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderProfileResponse> GetDataSyncProviderProfileByIdAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiProviderV1ProviderProfileResponse>> GetDataSyncProviderProfileByIdAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ConnectionTypeUpdatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiProviderV1ConnectionTypeUpdatedResponse> UpdateDataSyncConnectionTypeAsyncAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a connection type assigned to the DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ConnectionTypeUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiProviderV1ConnectionTypeUpdatedResponse>> UpdateDataSyncConnectionTypeAsyncWithHttpInfoAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeUpdatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeUpdatedResponse> UpdateDataSyncJobTypeAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobTypeV1JobTypeUpdatedResponse>> UpdateDataSyncJobTypeAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1ProfileUpdatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiJobTypeV1ProfileUpdatedResponse> UpdateDataSyncProfileAsyncAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a profile assigned to the DataSync job type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1ProfileUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiJobTypeV1ProfileUpdatedResponse>> UpdateDataSyncProfileAsyncWithHttpInfoAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderUpdatedResponse</returns>
        System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderUpdatedResponse> UpdateDataSyncProviderAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a DataSync provider
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSyncApiProviderV1ProviderUpdatedResponse>> UpdateDataSyncProviderAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataSyncApi : IDataSyncApiSync, IDataSyncApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataSyncApi : IDataSyncApi
    {
        private EdGraph.Management.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataSyncApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataSyncApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataSyncApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataSyncApi(string basePath)
        {
            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.Management.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataSyncApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataSyncApi(EdGraph.Management.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataSyncApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataSyncApi(EdGraph.Management.Client.Client.ISynchronousClient client, EdGraph.Management.Client.Client.IAsynchronousClient asyncClient, EdGraph.Management.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.Management.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.Management.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ConnectionTypeCreatedResponse</returns>
        public DataSyncApiProviderV1ConnectionTypeCreatedResponse CreateDataSyncConnectionTypeAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeCreatedResponse> localVarResponse = CreateDataSyncConnectionTypeAsyncWithHttpInfo(providerId, apiVersion, xVersion, dataSyncApiProviderV1CreateConnectionTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ConnectionTypeCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeCreatedResponse> CreateDataSyncConnectionTypeAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->CreateDataSyncConnectionTypeAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1CreateConnectionTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncConnectionTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DataSyncApiProviderV1ConnectionTypeCreatedResponse>("/datasync/providers/{providerId}/connectiontypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncConnectionTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ConnectionTypeCreatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiProviderV1ConnectionTypeCreatedResponse> CreateDataSyncConnectionTypeAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeCreatedResponse> localVarResponse = await CreateDataSyncConnectionTypeAsyncWithHttpInfoAsync(providerId, apiVersion, xVersion, dataSyncApiProviderV1CreateConnectionTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ConnectionTypeCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeCreatedResponse>> CreateDataSyncConnectionTypeAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateConnectionTypeRequest? dataSyncApiProviderV1CreateConnectionTypeRequest = default(DataSyncApiProviderV1CreateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->CreateDataSyncConnectionTypeAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1CreateConnectionTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncConnectionTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DataSyncApiProviderV1ConnectionTypeCreatedResponse>("/datasync/providers/{providerId}/connectiontypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncConnectionTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeCreatedResponse</returns>
        public DataSyncApiJobTypeV1JobTypeCreatedResponse CreateDataSyncJobTypeAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeCreatedResponse> localVarResponse = CreateDataSyncJobTypeAsyncWithHttpInfo(apiVersion, xVersion, dataSyncApiJobTypeV1CreateJobTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeCreatedResponse> CreateDataSyncJobTypeAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1CreateJobTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncJobTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DataSyncApiJobTypeV1JobTypeCreatedResponse>("/datasync/jobtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncJobTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeCreatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeCreatedResponse> CreateDataSyncJobTypeAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeCreatedResponse> localVarResponse = await CreateDataSyncJobTypeAsyncWithHttpInfoAsync(apiVersion, xVersion, dataSyncApiJobTypeV1CreateJobTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeCreatedResponse>> CreateDataSyncJobTypeAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateJobTypeRequest? dataSyncApiJobTypeV1CreateJobTypeRequest = default(DataSyncApiJobTypeV1CreateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1CreateJobTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncJobTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DataSyncApiJobTypeV1JobTypeCreatedResponse>("/datasync/jobtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncJobTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1ProfileCreatedResponse</returns>
        public DataSyncApiJobTypeV1ProfileCreatedResponse CreateDataSyncProfileAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileCreatedResponse> localVarResponse = CreateDataSyncProfileAsyncWithHttpInfo(jobTypeId, apiVersion, xVersion, dataSyncApiJobTypeV1CreateProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1ProfileCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileCreatedResponse> CreateDataSyncProfileAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->CreateDataSyncProfileAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1CreateProfileRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DataSyncApiJobTypeV1ProfileCreatedResponse>("/datasync/jobtypes/{jobTypeId}/profiles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1ProfileCreatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobTypeV1ProfileCreatedResponse> CreateDataSyncProfileAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileCreatedResponse> localVarResponse = await CreateDataSyncProfileAsyncWithHttpInfoAsync(jobTypeId, apiVersion, xVersion, dataSyncApiJobTypeV1CreateProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1CreateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1ProfileCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileCreatedResponse>> CreateDataSyncProfileAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1CreateProfileRequest? dataSyncApiJobTypeV1CreateProfileRequest = default(DataSyncApiJobTypeV1CreateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->CreateDataSyncProfileAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1CreateProfileRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DataSyncApiJobTypeV1ProfileCreatedResponse>("/datasync/jobtypes/{jobTypeId}/profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderCreatedResponse</returns>
        public DataSyncApiProviderV1ProviderCreatedResponse CreateDataSyncProviderAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderCreatedResponse> localVarResponse = CreateDataSyncProviderAsyncWithHttpInfo(apiVersion, xVersion, dataSyncApiProviderV1CreateProviderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderCreatedResponse> CreateDataSyncProviderAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1CreateProviderRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncProviderAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DataSyncApiProviderV1ProviderCreatedResponse>("/datasync/providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncProviderAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderCreatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderCreatedResponse> CreateDataSyncProviderAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderCreatedResponse> localVarResponse = await CreateDataSyncProviderAsyncWithHttpInfoAsync(apiVersion, xVersion, dataSyncApiProviderV1CreateProviderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1CreateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderCreatedResponse>> CreateDataSyncProviderAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1CreateProviderRequest? dataSyncApiProviderV1CreateProviderRequest = default(DataSyncApiProviderV1CreateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1CreateProviderRequest;

            localVarRequestOptions.Operation = "DataSyncApi.CreateDataSyncProviderAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DataSyncApiProviderV1ProviderCreatedResponse>("/datasync/providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSyncProviderAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataSyncConnectionTypeAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0)
        {
            DeleteDataSyncConnectionTypeAsyncWithHttpInfo(providerId, connectionTypeId, apiVersion, xVersion, dataSyncApiProviderV1DeleteConnectionTypeRequest);
        }

        /// <summary>
        /// Delete a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteDataSyncConnectionTypeAsyncWithHttpInfo(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->DeleteDataSyncConnectionTypeAsync");
            }

            // verify the required parameter 'connectionTypeId' is set
            if (connectionTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'connectionTypeId' when calling DataSyncApi->DeleteDataSyncConnectionTypeAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(connectionTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1DeleteConnectionTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncConnectionTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/datasync/providers/{providerId}/connectiontypes/{connectionTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncConnectionTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataSyncConnectionTypeAsyncAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDataSyncConnectionTypeAsyncWithHttpInfoAsync(providerId, connectionTypeId, apiVersion, xVersion, dataSyncApiProviderV1DeleteConnectionTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteDataSyncConnectionTypeAsyncWithHttpInfoAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteConnectionTypeRequest? dataSyncApiProviderV1DeleteConnectionTypeRequest = default(DataSyncApiProviderV1DeleteConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->DeleteDataSyncConnectionTypeAsync");
            }

            // verify the required parameter 'connectionTypeId' is set
            if (connectionTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'connectionTypeId' when calling DataSyncApi->DeleteDataSyncConnectionTypeAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(connectionTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1DeleteConnectionTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncConnectionTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/datasync/providers/{providerId}/connectiontypes/{connectionTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncConnectionTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataSyncJobTypeAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0)
        {
            DeleteDataSyncJobTypeAsyncWithHttpInfo(jobTypeId, apiVersion, xVersion, dataSyncApiJobTypeV1DeleteJobTypeRequest);
        }

        /// <summary>
        /// Delete a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteDataSyncJobTypeAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->DeleteDataSyncJobTypeAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1DeleteJobTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncJobTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/datasync/jobtypes/{jobTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncJobTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataSyncJobTypeAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDataSyncJobTypeAsyncWithHttpInfoAsync(jobTypeId, apiVersion, xVersion, dataSyncApiJobTypeV1DeleteJobTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteDataSyncJobTypeAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteJobTypeRequest? dataSyncApiJobTypeV1DeleteJobTypeRequest = default(DataSyncApiJobTypeV1DeleteJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->DeleteDataSyncJobTypeAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1DeleteJobTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncJobTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/datasync/jobtypes/{jobTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncJobTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataSyncProfileAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0)
        {
            DeleteDataSyncProfileAsyncWithHttpInfo(jobTypeId, profileId, apiVersion, xVersion, dataSyncApiJobTypeV1DeleteProfileRequest);
        }

        /// <summary>
        /// Delete a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteDataSyncProfileAsyncWithHttpInfo(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->DeleteDataSyncProfileAsync");
            }

            // verify the required parameter 'profileId' is set
            if (profileId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'profileId' when calling DataSyncApi->DeleteDataSyncProfileAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("profileId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1DeleteProfileRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/datasync/jobtypes/{jobTypeId}/profiles/{profileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataSyncProfileAsyncAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDataSyncProfileAsyncWithHttpInfoAsync(jobTypeId, profileId, apiVersion, xVersion, dataSyncApiJobTypeV1DeleteProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1DeleteProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteDataSyncProfileAsyncWithHttpInfoAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1DeleteProfileRequest? dataSyncApiJobTypeV1DeleteProfileRequest = default(DataSyncApiJobTypeV1DeleteProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->DeleteDataSyncProfileAsync");
            }

            // verify the required parameter 'profileId' is set
            if (profileId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'profileId' when calling DataSyncApi->DeleteDataSyncProfileAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("profileId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1DeleteProfileRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/datasync/jobtypes/{jobTypeId}/profiles/{profileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataSyncProviderAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0)
        {
            DeleteDataSyncProviderAsyncWithHttpInfo(providerId, apiVersion, xVersion, dataSyncApiProviderV1DeleteProviderRequest);
        }

        /// <summary>
        /// Delete a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteDataSyncProviderAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->DeleteDataSyncProviderAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1DeleteProviderRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncProviderAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/datasync/providers/{providerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncProviderAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataSyncProviderAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDataSyncProviderAsyncWithHttpInfoAsync(providerId, apiVersion, xVersion, dataSyncApiProviderV1DeleteProviderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1DeleteProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteDataSyncProviderAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1DeleteProviderRequest? dataSyncApiProviderV1DeleteProviderRequest = default(DataSyncApiProviderV1DeleteProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->DeleteDataSyncProviderAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1DeleteProviderRequest;

            localVarRequestOptions.Operation = "DataSyncApi.DeleteDataSyncProviderAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/datasync/providers/{providerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSyncProviderAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of DataSync job types 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel</returns>
        public DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel GetAllDataSyncJobTypesAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel> localVarResponse = GetAllDataSyncJobTypesAsyncWithHttpInfo(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of DataSync job types 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel> GetAllDataSyncJobTypesAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetAllDataSyncJobTypesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel>("/datasync/jobtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDataSyncJobTypesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of DataSync job types 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel> GetAllDataSyncJobTypesAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel> localVarResponse = await GetAllDataSyncJobTypesAsyncWithHttpInfoAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of DataSync job types 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel>> GetAllDataSyncJobTypesAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetAllDataSyncJobTypesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataSyncApiJobTypeV1JobTypeListResponsePaginatedItemsViewModel>("/datasync/jobtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDataSyncJobTypesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of DataSync providers 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel</returns>
        public DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel GetAllDataSyncProvidersAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel> localVarResponse = GetAllDataSyncProvidersAsyncWithHttpInfo(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of DataSync providers 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel> GetAllDataSyncProvidersAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetAllDataSyncProvidersAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel>("/datasync/providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDataSyncProvidersAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of DataSync providers 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel> GetAllDataSyncProvidersAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel> localVarResponse = await GetAllDataSyncProvidersAsyncWithHttpInfoAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of DataSync providers 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel>> GetAllDataSyncProvidersAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetAllDataSyncProvidersAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataSyncApiProviderV1ProviderListResponsePaginatedItemsViewModel>("/datasync/providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDataSyncProvidersAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeProfileResponse</returns>
        public DataSyncApiJobTypeV1JobTypeProfileResponse GetDataSyncJobTypeProfileByIdAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeProfileResponse> localVarResponse = GetDataSyncJobTypeProfileByIdAsyncWithHttpInfo(jobTypeId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeProfileResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeProfileResponse> GetDataSyncJobTypeProfileByIdAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->GetDataSyncJobTypeProfileByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetDataSyncJobTypeProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataSyncApiJobTypeV1JobTypeProfileResponse>("/datasync/jobtypes/{jobTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSyncJobTypeProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeProfileResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeProfileResponse> GetDataSyncJobTypeProfileByIdAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeProfileResponse> localVarResponse = await GetDataSyncJobTypeProfileByIdAsyncWithHttpInfoAsync(jobTypeId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeProfileResponse>> GetDataSyncJobTypeProfileByIdAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->GetDataSyncJobTypeProfileByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetDataSyncJobTypeProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataSyncApiJobTypeV1JobTypeProfileResponse>("/datasync/jobtypes/{jobTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSyncJobTypeProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderProfileResponse</returns>
        public DataSyncApiProviderV1ProviderProfileResponse GetDataSyncProviderProfileByIdAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderProfileResponse> localVarResponse = GetDataSyncProviderProfileByIdAsyncWithHttpInfo(providerId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderProfileResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderProfileResponse> GetDataSyncProviderProfileByIdAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->GetDataSyncProviderProfileByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetDataSyncProviderProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataSyncApiProviderV1ProviderProfileResponse>("/datasync/providers/{providerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSyncProviderProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderProfileResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderProfileResponse> GetDataSyncProviderProfileByIdAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderProfileResponse> localVarResponse = await GetDataSyncProviderProfileByIdAsyncWithHttpInfoAsync(providerId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderProfileResponse>> GetDataSyncProviderProfileByIdAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->GetDataSyncProviderProfileByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "DataSyncApi.GetDataSyncProviderProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataSyncApiProviderV1ProviderProfileResponse>("/datasync/providers/{providerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSyncProviderProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ConnectionTypeUpdatedResponse</returns>
        public DataSyncApiProviderV1ConnectionTypeUpdatedResponse UpdateDataSyncConnectionTypeAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeUpdatedResponse> localVarResponse = UpdateDataSyncConnectionTypeAsyncWithHttpInfo(providerId, connectionTypeId, apiVersion, xVersion, dataSyncApiProviderV1UpdateConnectionTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ConnectionTypeUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeUpdatedResponse> UpdateDataSyncConnectionTypeAsyncWithHttpInfo(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->UpdateDataSyncConnectionTypeAsync");
            }

            // verify the required parameter 'connectionTypeId' is set
            if (connectionTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'connectionTypeId' when calling DataSyncApi->UpdateDataSyncConnectionTypeAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(connectionTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1UpdateConnectionTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncConnectionTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DataSyncApiProviderV1ConnectionTypeUpdatedResponse>("/datasync/providers/{providerId}/connectiontypes/{connectionTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncConnectionTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ConnectionTypeUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiProviderV1ConnectionTypeUpdatedResponse> UpdateDataSyncConnectionTypeAsyncAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeUpdatedResponse> localVarResponse = await UpdateDataSyncConnectionTypeAsyncWithHttpInfoAsync(providerId, connectionTypeId, apiVersion, xVersion, dataSyncApiProviderV1UpdateConnectionTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a connection type assigned to the DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="connectionTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateConnectionTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ConnectionTypeUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ConnectionTypeUpdatedResponse>> UpdateDataSyncConnectionTypeAsyncWithHttpInfoAsync(string providerId, string connectionTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateConnectionTypeRequest? dataSyncApiProviderV1UpdateConnectionTypeRequest = default(DataSyncApiProviderV1UpdateConnectionTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->UpdateDataSyncConnectionTypeAsync");
            }

            // verify the required parameter 'connectionTypeId' is set
            if (connectionTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'connectionTypeId' when calling DataSyncApi->UpdateDataSyncConnectionTypeAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(connectionTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1UpdateConnectionTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncConnectionTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DataSyncApiProviderV1ConnectionTypeUpdatedResponse>("/datasync/providers/{providerId}/connectiontypes/{connectionTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncConnectionTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1JobTypeUpdatedResponse</returns>
        public DataSyncApiJobTypeV1JobTypeUpdatedResponse UpdateDataSyncJobTypeAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeUpdatedResponse> localVarResponse = UpdateDataSyncJobTypeAsyncWithHttpInfo(jobTypeId, apiVersion, xVersion, dataSyncApiJobTypeV1UpdateJobTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1JobTypeUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeUpdatedResponse> UpdateDataSyncJobTypeAsyncWithHttpInfo(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->UpdateDataSyncJobTypeAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1UpdateJobTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncJobTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DataSyncApiJobTypeV1JobTypeUpdatedResponse>("/datasync/jobtypes/{jobTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncJobTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1JobTypeUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobTypeV1JobTypeUpdatedResponse> UpdateDataSyncJobTypeAsyncAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeUpdatedResponse> localVarResponse = await UpdateDataSyncJobTypeAsyncWithHttpInfoAsync(jobTypeId, apiVersion, xVersion, dataSyncApiJobTypeV1UpdateJobTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateJobTypeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1JobTypeUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1JobTypeUpdatedResponse>> UpdateDataSyncJobTypeAsyncWithHttpInfoAsync(string jobTypeId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateJobTypeRequest? dataSyncApiJobTypeV1UpdateJobTypeRequest = default(DataSyncApiJobTypeV1UpdateJobTypeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->UpdateDataSyncJobTypeAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1UpdateJobTypeRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncJobTypeAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DataSyncApiJobTypeV1JobTypeUpdatedResponse>("/datasync/jobtypes/{jobTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncJobTypeAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiJobTypeV1ProfileUpdatedResponse</returns>
        public DataSyncApiJobTypeV1ProfileUpdatedResponse UpdateDataSyncProfileAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileUpdatedResponse> localVarResponse = UpdateDataSyncProfileAsyncWithHttpInfo(jobTypeId, profileId, apiVersion, xVersion, dataSyncApiJobTypeV1UpdateProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiJobTypeV1ProfileUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileUpdatedResponse> UpdateDataSyncProfileAsyncWithHttpInfo(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->UpdateDataSyncProfileAsync");
            }

            // verify the required parameter 'profileId' is set
            if (profileId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'profileId' when calling DataSyncApi->UpdateDataSyncProfileAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("profileId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1UpdateProfileRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DataSyncApiJobTypeV1ProfileUpdatedResponse>("/datasync/jobtypes/{jobTypeId}/profiles/{profileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiJobTypeV1ProfileUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiJobTypeV1ProfileUpdatedResponse> UpdateDataSyncProfileAsyncAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileUpdatedResponse> localVarResponse = await UpdateDataSyncProfileAsyncWithHttpInfoAsync(jobTypeId, profileId, apiVersion, xVersion, dataSyncApiJobTypeV1UpdateProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a profile assigned to the DataSync job type 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobTypeId"></param>
        /// <param name="profileId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiJobTypeV1UpdateProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiJobTypeV1ProfileUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiJobTypeV1ProfileUpdatedResponse>> UpdateDataSyncProfileAsyncWithHttpInfoAsync(string jobTypeId, string profileId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiJobTypeV1UpdateProfileRequest? dataSyncApiJobTypeV1UpdateProfileRequest = default(DataSyncApiJobTypeV1UpdateProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobTypeId' is set
            if (jobTypeId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'jobTypeId' when calling DataSyncApi->UpdateDataSyncProfileAsync");
            }

            // verify the required parameter 'profileId' is set
            if (profileId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'profileId' when calling DataSyncApi->UpdateDataSyncProfileAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobTypeId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(jobTypeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("profileId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiJobTypeV1UpdateProfileRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DataSyncApiJobTypeV1ProfileUpdatedResponse>("/datasync/jobtypes/{jobTypeId}/profiles/{profileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataSyncApiProviderV1ProviderUpdatedResponse</returns>
        public DataSyncApiProviderV1ProviderUpdatedResponse UpdateDataSyncProviderAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderUpdatedResponse> localVarResponse = UpdateDataSyncProviderAsyncWithHttpInfo(providerId, apiVersion, xVersion, dataSyncApiProviderV1UpdateProviderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataSyncApiProviderV1ProviderUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderUpdatedResponse> UpdateDataSyncProviderAsyncWithHttpInfo(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->UpdateDataSyncProviderAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1UpdateProviderRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncProviderAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DataSyncApiProviderV1ProviderUpdatedResponse>("/datasync/providers/{providerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncProviderAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataSyncApiProviderV1ProviderUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<DataSyncApiProviderV1ProviderUpdatedResponse> UpdateDataSyncProviderAsyncAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderUpdatedResponse> localVarResponse = await UpdateDataSyncProviderAsyncWithHttpInfoAsync(providerId, apiVersion, xVersion, dataSyncApiProviderV1UpdateProviderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a DataSync provider 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="dataSyncApiProviderV1UpdateProviderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataSyncApiProviderV1ProviderUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<DataSyncApiProviderV1ProviderUpdatedResponse>> UpdateDataSyncProviderAsyncWithHttpInfoAsync(string providerId, string? apiVersion = default(string?), string? xVersion = default(string?), DataSyncApiProviderV1UpdateProviderRequest? dataSyncApiProviderV1UpdateProviderRequest = default(DataSyncApiProviderV1UpdateProviderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'providerId' when calling DataSyncApi->UpdateDataSyncProviderAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("providerId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(providerId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = dataSyncApiProviderV1UpdateProviderRequest;

            localVarRequestOptions.Operation = "DataSyncApi.UpdateDataSyncProviderAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DataSyncApiProviderV1ProviderUpdatedResponse>("/datasync/providers/{providerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSyncProviderAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
