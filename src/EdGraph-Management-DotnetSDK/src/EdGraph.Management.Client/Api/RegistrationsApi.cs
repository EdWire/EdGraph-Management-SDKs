/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.Management.Client.Client;
using EdGraph.Management.Client.Client.Auth;
using EdGraph.Management.Client.Model;

namespace EdGraph.Management.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistrationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Approve a tenant&#39;s registration request
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApproveTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Approve a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApproveTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a registration on behalf of a user/tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1TenantRegistrationCreatedResponse</returns>
        RegistrationApiRegistrationV1TenantRegistrationCreatedResponse CreateTenantRegistrationAsync(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a registration on behalf of a user/tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1TenantRegistrationCreatedResponse</returns>
        ApiResponse<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse> CreateTenantRegistrationAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a tenant&#39;s registration request
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0);
        /// <summary>
        /// Deny a tenant&#39;s registration request
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DenyTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0);

        /// <summary>
        /// Deny a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DenyTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of registrations
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel</returns>
        RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel GetAllTenantRegistrationsAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of registrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel</returns>
        ApiResponse<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel> GetAllTenantRegistrationsAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Gets an Azure Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1AzureSubscription</returns>
        RegistrationApiRegistrationV1AzureSubscription GetAzureSubscriptionAsync(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Gets an Azure Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1AzureSubscription</returns>
        ApiResponse<RegistrationApiRegistrationV1AzureSubscription> GetAzureSubscriptionAsyncWithHttpInfo(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Gets a list of applications available for registration/onboarding
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV1PaginatedItemsResponse</returns>
        ApplicationApiApplicationV1PaginatedItemsResponse GetOnboardingApplicationsAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Gets a list of applications available for registration/onboarding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV1PaginatedItemsResponse</returns>
        ApiResponse<ApplicationApiApplicationV1PaginatedItemsResponse> GetOnboardingApplicationsAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific tenant registration using its primary key
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1RegistrationProfileResponse</returns>
        RegistrationApiRegistrationV1RegistrationProfileResponse GetTenantRegistrationByIdAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific tenant registration using its primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1RegistrationProfileResponse</returns>
        ApiResponse<RegistrationApiRegistrationV1RegistrationProfileResponse> GetTenantRegistrationByIdAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update a tenant&#39;s registration request
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse</returns>
        RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse UpdateTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse</returns>
        ApiResponse<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse> UpdateTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistrationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Approve a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApproveTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApproveTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a registration on behalf of a user/tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1TenantRegistrationCreatedResponse</returns>
        System.Threading.Tasks.Task<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse> CreateTenantRegistrationAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a registration on behalf of a user/tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1TenantRegistrationCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse>> CreateTenantRegistrationAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deny a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DenyTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deny a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DenyTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of registrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel> GetAllTenantRegistrationsAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of registrations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel>> GetAllTenantRegistrationsAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets an Azure Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1AzureSubscription</returns>
        System.Threading.Tasks.Task<RegistrationApiRegistrationV1AzureSubscription> GetAzureSubscriptionAsyncAsync(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets an Azure Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1AzureSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationApiRegistrationV1AzureSubscription>> GetAzureSubscriptionAsyncWithHttpInfoAsync(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of applications available for registration/onboarding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV1PaginatedItemsResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV1PaginatedItemsResponse> GetOnboardingApplicationsAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of applications available for registration/onboarding
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV1PaginatedItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV1PaginatedItemsResponse>> GetOnboardingApplicationsAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific tenant registration using its primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1RegistrationProfileResponse</returns>
        System.Threading.Tasks.Task<RegistrationApiRegistrationV1RegistrationProfileResponse> GetTenantRegistrationByIdAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific tenant registration using its primary key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1RegistrationProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationApiRegistrationV1RegistrationProfileResponse>> GetTenantRegistrationByIdAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse</returns>
        System.Threading.Tasks.Task<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse> UpdateTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a tenant&#39;s registration request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse>> UpdateTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistrationsApi : IRegistrationsApiSync, IRegistrationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegistrationsApi : IRegistrationsApi
    {
        private EdGraph.Management.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistrationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistrationsApi(string basePath)
        {
            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.Management.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegistrationsApi(EdGraph.Management.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RegistrationsApi(EdGraph.Management.Client.Client.ISynchronousClient client, EdGraph.Management.Client.Client.IAsynchronousClient asyncClient, EdGraph.Management.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.Management.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.Management.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Approve a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApproveTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            ApproveTenantRegistrationAsyncWithHttpInfo(registrationId, apiVersion, xVersion);
        }

        /// <summary>
        /// Approve a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> ApproveTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->ApproveTenantRegistrationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.ApproveTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/registrations/{registrationId}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApproveTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApproveTenantRegistrationAsyncWithHttpInfoAsync(registrationId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Approve a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> ApproveTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->ApproveTenantRegistrationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.ApproveTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/registrations/{registrationId}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a registration on behalf of a user/tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1TenantRegistrationCreatedResponse</returns>
        public RegistrationApiRegistrationV1TenantRegistrationCreatedResponse CreateTenantRegistrationAsync(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse> localVarResponse = CreateTenantRegistrationAsyncWithHttpInfo(apiVersion, xVersion, registrationApiRegistrationV1CreateTenantRegistrationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a registration on behalf of a user/tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1TenantRegistrationCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse> CreateTenantRegistrationAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1CreateTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.CreateTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse>("/registrations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a registration on behalf of a user/tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1TenantRegistrationCreatedResponse</returns>
        public async System.Threading.Tasks.Task<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse> CreateTenantRegistrationAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse> localVarResponse = await CreateTenantRegistrationAsyncWithHttpInfoAsync(apiVersion, xVersion, registrationApiRegistrationV1CreateTenantRegistrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a registration on behalf of a user/tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1CreateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1TenantRegistrationCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse>> CreateTenantRegistrationAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1CreateTenantRegistrationRequest? registrationApiRegistrationV1CreateTenantRegistrationRequest = default(RegistrationApiRegistrationV1CreateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1CreateTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.CreateTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RegistrationApiRegistrationV1TenantRegistrationCreatedResponse>("/registrations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0)
        {
            DeleteTenantRegistrationAsyncWithHttpInfo(registrationId, apiVersion, xVersion, registrationApiRegistrationV1DeleteTenantRegistrationRequest);
        }

        /// <summary>
        /// Delete a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->DeleteTenantRegistrationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1DeleteTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.DeleteTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/registrations/{registrationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantRegistrationAsyncWithHttpInfoAsync(registrationId, apiVersion, xVersion, registrationApiRegistrationV1DeleteTenantRegistrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DeleteTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DeleteTenantRegistrationRequest? registrationApiRegistrationV1DeleteTenantRegistrationRequest = default(RegistrationApiRegistrationV1DeleteTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->DeleteTenantRegistrationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1DeleteTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.DeleteTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/registrations/{registrationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deny a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DenyTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0)
        {
            DenyTenantRegistrationAsyncWithHttpInfo(registrationId, apiVersion, xVersion, registrationApiRegistrationV1DenyTenantRegistrationRequest);
        }

        /// <summary>
        /// Deny a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DenyTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->DenyTenantRegistrationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1DenyTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.DenyTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/registrations/{registrationId}/deny", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DenyTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deny a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DenyTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DenyTenantRegistrationAsyncWithHttpInfoAsync(registrationId, apiVersion, xVersion, registrationApiRegistrationV1DenyTenantRegistrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deny a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1DenyTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DenyTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1DenyTenantRegistrationRequest? registrationApiRegistrationV1DenyTenantRegistrationRequest = default(RegistrationApiRegistrationV1DenyTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->DenyTenantRegistrationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1DenyTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.DenyTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/registrations/{registrationId}/deny", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DenyTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of registrations 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel</returns>
        public RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel GetAllTenantRegistrationsAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel> localVarResponse = GetAllTenantRegistrationsAsyncWithHttpInfo(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of registrations 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel> GetAllTenantRegistrationsAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetAllTenantRegistrationsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel>("/registrations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantRegistrationsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of registrations 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel> GetAllTenantRegistrationsAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel> localVarResponse = await GetAllTenantRegistrationsAsyncWithHttpInfoAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of registrations 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel>> GetAllTenantRegistrationsAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetAllTenantRegistrationsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RegistrationApiRegistrationV1RegistrationListResponsePaginatedItemsViewModel>("/registrations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantRegistrationsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets an Azure Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1AzureSubscription</returns>
        public RegistrationApiRegistrationV1AzureSubscription GetAzureSubscriptionAsync(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1AzureSubscription> localVarResponse = GetAzureSubscriptionAsyncWithHttpInfo(subscriptionStoragePath, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an Azure Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1AzureSubscription</returns>
        public EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1AzureSubscription> GetAzureSubscriptionAsyncWithHttpInfo(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriptionStoragePath != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "subscriptionStoragePath", subscriptionStoragePath));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetAzureSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RegistrationApiRegistrationV1AzureSubscription>("/registrations/azure/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets an Azure Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1AzureSubscription</returns>
        public async System.Threading.Tasks.Task<RegistrationApiRegistrationV1AzureSubscription> GetAzureSubscriptionAsyncAsync(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1AzureSubscription> localVarResponse = await GetAzureSubscriptionAsyncWithHttpInfoAsync(subscriptionStoragePath, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an Azure Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionStoragePath"> (optional)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1AzureSubscription)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1AzureSubscription>> GetAzureSubscriptionAsyncWithHttpInfoAsync(string? subscriptionStoragePath = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subscriptionStoragePath != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "subscriptionStoragePath", subscriptionStoragePath));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetAzureSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RegistrationApiRegistrationV1AzureSubscription>("/registrations/azure/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of applications available for registration/onboarding 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV1PaginatedItemsResponse</returns>
        public ApplicationApiApplicationV1PaginatedItemsResponse GetOnboardingApplicationsAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV1PaginatedItemsResponse> localVarResponse = GetOnboardingApplicationsAsyncWithHttpInfo(pageSize, pageIndex, orderBy, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of applications available for registration/onboarding 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV1PaginatedItemsResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV1PaginatedItemsResponse> GetOnboardingApplicationsAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetOnboardingApplicationsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationApiApplicationV1PaginatedItemsResponse>("/registrations/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOnboardingApplicationsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of applications available for registration/onboarding 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV1PaginatedItemsResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV1PaginatedItemsResponse> GetOnboardingApplicationsAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV1PaginatedItemsResponse> localVarResponse = await GetOnboardingApplicationsAsyncWithHttpInfoAsync(pageSize, pageIndex, orderBy, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of applications available for registration/onboarding 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV1PaginatedItemsResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV1PaginatedItemsResponse>> GetOnboardingApplicationsAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetOnboardingApplicationsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationApiApplicationV1PaginatedItemsResponse>("/registrations/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOnboardingApplicationsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific tenant registration using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1RegistrationProfileResponse</returns>
        public RegistrationApiRegistrationV1RegistrationProfileResponse GetTenantRegistrationByIdAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationProfileResponse> localVarResponse = GetTenantRegistrationByIdAsyncWithHttpInfo(registrationId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific tenant registration using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1RegistrationProfileResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationProfileResponse> GetTenantRegistrationByIdAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->GetTenantRegistrationByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetTenantRegistrationByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RegistrationApiRegistrationV1RegistrationProfileResponse>("/registrations/{registrationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantRegistrationByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific tenant registration using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1RegistrationProfileResponse</returns>
        public async System.Threading.Tasks.Task<RegistrationApiRegistrationV1RegistrationProfileResponse> GetTenantRegistrationByIdAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationProfileResponse> localVarResponse = await GetTenantRegistrationByIdAsyncWithHttpInfoAsync(registrationId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific tenant registration using its primary key 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1RegistrationProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1RegistrationProfileResponse>> GetTenantRegistrationByIdAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->GetTenantRegistrationByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "RegistrationsApi.GetTenantRegistrationByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RegistrationApiRegistrationV1RegistrationProfileResponse>("/registrations/{registrationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantRegistrationByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse</returns>
        public RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse UpdateTenantRegistrationAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse> localVarResponse = UpdateTenantRegistrationAsyncWithHttpInfo(registrationId, apiVersion, xVersion, registrationApiRegistrationV1UpdateTenantRegistrationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse> UpdateTenantRegistrationAsyncWithHttpInfo(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->UpdateTenantRegistrationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1UpdateTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.UpdateTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse>("/registrations/{registrationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse> UpdateTenantRegistrationAsyncAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse> localVarResponse = await UpdateTenantRegistrationAsyncWithHttpInfoAsync(registrationId, apiVersion, xVersion, registrationApiRegistrationV1UpdateTenantRegistrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tenant&#39;s registration request 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="registrationApiRegistrationV1UpdateTenantRegistrationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse>> UpdateTenantRegistrationAsyncWithHttpInfoAsync(string registrationId, string? apiVersion = default(string?), string? xVersion = default(string?), RegistrationApiRegistrationV1UpdateTenantRegistrationRequest? registrationApiRegistrationV1UpdateTenantRegistrationRequest = default(RegistrationApiRegistrationV1UpdateTenantRegistrationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationsApi->UpdateTenantRegistrationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("registrationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(registrationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = registrationApiRegistrationV1UpdateTenantRegistrationRequest;

            localVarRequestOptions.Operation = "RegistrationsApi.UpdateTenantRegistrationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RegistrationApiRegistrationV1TenantRegistrationUpdatedResponse>("/registrations/{registrationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantRegistrationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
