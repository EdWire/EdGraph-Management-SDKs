/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.Management.Client.Client;
using EdGraph.Management.Client.Client.Auth;
using EdGraph.Management.Client.Model;

namespace EdGraph.Management.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionActivatedResponse</returns>
        TenantApiTenantV1SubscriptionActivatedResponse ActivateTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Activate a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionActivatedResponse</returns>
        ApiResponse<TenantApiTenantV1SubscriptionActivatedResponse> ActivateTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a tenant&#39;s application
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationCreatedResponse</returns>
        ApplicationApiApplicationV2ApplicationCreatedResponse CreateTenantApplicationAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationCreatedResponse</returns>
        ApiResponse<ApplicationApiApplicationV2ApplicationCreatedResponse> CreateTenantApplicationAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantCreatedResponse</returns>
        TenantApiTenantV1TenantCreatedResponse CreateTenantAsync(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantCreatedResponse</returns>
        ApiResponse<TenantApiTenantV1TenantCreatedResponse> CreateTenantAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0);
        /// <summary>
        /// Creates a new Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionCreatedResponse</returns>
        TenantApiTenantV1SubscriptionCreatedResponse CreateTenantSubscriptionAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionCreatedResponse</returns>
        ApiResponse<TenantApiTenantV1SubscriptionCreatedResponse> CreateTenantSubscriptionAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// Deactivate a Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionDeactivatedResponse</returns>
        TenantApiTenantV1SubscriptionDeactivatedResponse DeactivateTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Deactivate a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionDeactivatedResponse</returns>
        ApiResponse<TenantApiTenantV1SubscriptionDeactivatedResponse> DeactivateTenantSubscriptionAsyncAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// Delete a tenant&#39;s application
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteApplicationAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0);

        /// <summary>
        /// Delete a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0);
        /// <summary>
        /// Deletes a tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0);

        /// <summary>
        /// Deletes a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0);
        /// <summary>
        /// Deletes a Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Deletes a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of Tenant Subscriptions
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel</returns>
        TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel GetAllTenantSubscriptionsAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of Tenant Subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel</returns>
        ApiResponse<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel> GetAllTenantSubscriptionsAsyncWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of tenants
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantListResponsePaginatedItemsViewModel</returns>
        TenantApiTenantV1TenantListResponsePaginatedItemsViewModel GetAllTenantsAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of tenants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantListResponsePaginatedItemsViewModel</returns>
        ApiResponse<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel> GetAllTenantsAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationLauncherSettingsResponse</returns>
        ApplicationApiApplicationV2ApplicationLauncherSettingsResponse GetTenantApplicationLauncherSettingsByIdAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationLauncherSettingsResponse</returns>
        ApiResponse<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse> GetTenantApplicationLauncherSettingsByIdAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationProfileResponse</returns>
        ApplicationApiApplicationV2ApplicationProfileResponse GetTenantApplicationProfileByIdAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationProfileResponse</returns>
        ApiResponse<ApplicationApiApplicationV2ApplicationProfileResponse> GetTenantApplicationProfileByIdAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of tenant applications
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel</returns>
        EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel GetTenantApplicationsAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of tenant applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel</returns>
        ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel> GetTenantApplicationsAsyncWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantProfileResponse</returns>
        TenantApiTenantV1TenantProfileResponse GetTenantByIdAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantProfileResponse</returns>
        ApiResponse<TenantApiTenantV1TenantProfileResponse> GetTenantByIdAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionProfileResponse</returns>
        TenantApiTenantV1SubscriptionProfileResponse GetTenantSubscriptionProfileByIdAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionProfileResponse</returns>
        ApiResponse<TenantApiTenantV1SubscriptionProfileResponse> GetTenantSubscriptionProfileByIdAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Publish a tenant&#39;s application
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationPublishedResponse</returns>
        ApplicationApiApplicationV2ApplicationPublishedResponse PublishTenantApplicationAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Publish a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationPublishedResponse</returns>
        ApiResponse<ApplicationApiApplicationV2ApplicationPublishedResponse> PublishTenantApplicationAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Reject a Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionRejectedResponse</returns>
        TenantApiTenantV1SubscriptionRejectedResponse RejectTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Reject a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionRejectedResponse</returns>
        ApiResponse<TenantApiTenantV1SubscriptionRejectedResponse> RejectTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a tenant&#39;s application launcher settings
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        ApplicationApiApplicationV2ApplicationUpdatedResponse UpdateTenantApplicationLauncherSettingsAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a tenant&#39;s application launcher settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationLauncherSettingsAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a tenant&#39;s application profile
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        ApplicationApiApplicationV2ApplicationUpdatedResponse UpdateTenantApplicationProfileAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a tenant&#39;s application profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationProfileAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates a tenant
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantUpdatedResponse</returns>
        TenantApiTenantV1TenantUpdatedResponse UpdateTenantAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantUpdatedResponse</returns>
        ApiResponse<TenantApiTenantV1TenantUpdatedResponse> UpdateTenantAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates a Tenant Subscription
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionUpdatedResponse</returns>
        TenantApiTenantV1SubscriptionUpdatedResponse UpdateTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionUpdatedResponse</returns>
        ApiResponse<TenantApiTenantV1SubscriptionUpdatedResponse> UpdateTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionActivatedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionActivatedResponse> ActivateTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Activate a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionActivatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionActivatedResponse>> ActivateTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationCreatedResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationCreatedResponse> CreateTenantApplicationAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV2ApplicationCreatedResponse>> CreateTenantApplicationAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantCreatedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1TenantCreatedResponse> CreateTenantAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1TenantCreatedResponse>> CreateTenantAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionCreatedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionCreatedResponse> CreateTenantSubscriptionAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionCreatedResponse>> CreateTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deactivate a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionDeactivatedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionDeactivatedResponse> DeactivateTenantSubscriptionAsyncAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deactivate a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionDeactivatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionDeactivatedResponse>> DeactivateTenantSubscriptionAsyncAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of Tenant Subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel> GetAllTenantSubscriptionsAsyncAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of Tenant Subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel>> GetAllTenantSubscriptionsAsyncWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of tenants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantListResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel> GetAllTenantsAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of tenants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantListResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel>> GetAllTenantsAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationLauncherSettingsResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse> GetTenantApplicationLauncherSettingsByIdAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationLauncherSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse>> GetTenantApplicationLauncherSettingsByIdAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationProfileResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationProfileResponse> GetTenantApplicationProfileByIdAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific application associated to a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV2ApplicationProfileResponse>> GetTenantApplicationProfileByIdAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of tenant applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel> GetTenantApplicationsAsyncAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of tenant applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel>> GetTenantApplicationsAsyncWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantProfileResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1TenantProfileResponse> GetTenantByIdAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1TenantProfileResponse>> GetTenantByIdAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionProfileResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionProfileResponse> GetTenantSubscriptionProfileByIdAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionProfileResponse>> GetTenantSubscriptionProfileByIdAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationPublishedResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationPublishedResponse> PublishTenantApplicationAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Publish a tenant&#39;s application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationPublishedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV2ApplicationPublishedResponse>> PublishTenantApplicationAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionRejectedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionRejectedResponse> RejectTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionRejectedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionRejectedResponse>> RejectTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a tenant&#39;s application launcher settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationLauncherSettingsAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a tenant&#39;s application launcher settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse>> UpdateTenantApplicationLauncherSettingsAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a tenant&#39;s application profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationProfileAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a tenant&#39;s application profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse>> UpdateTenantApplicationProfileAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantUpdatedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1TenantUpdatedResponse> UpdateTenantAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a tenant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1TenantUpdatedResponse>> UpdateTenantAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionUpdatedResponse</returns>
        System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionUpdatedResponse> UpdateTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a Tenant Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionUpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantApiTenantV1SubscriptionUpdatedResponse>> UpdateTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApi : ITenantsApiSync, ITenantsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantsApi : ITenantsApi
    {
        private EdGraph.Management.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantsApi(string basePath)
        {
            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.Management.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantsApi(EdGraph.Management.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TenantsApi(EdGraph.Management.Client.Client.ISynchronousClient client, EdGraph.Management.Client.Client.IAsynchronousClient asyncClient, EdGraph.Management.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.Management.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.Management.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionActivatedResponse</returns>
        public TenantApiTenantV1SubscriptionActivatedResponse ActivateTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionActivatedResponse> localVarResponse = ActivateTenantSubscriptionAsyncWithHttpInfo(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1ActivateSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionActivatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionActivatedResponse> ActivateTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->ActivateTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->ActivateTenantSubscriptionAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1ActivateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.ActivateTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TenantApiTenantV1SubscriptionActivatedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionActivatedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionActivatedResponse> ActivateTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionActivatedResponse> localVarResponse = await ActivateTenantSubscriptionAsyncWithHttpInfoAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1ActivateSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1ActivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionActivatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionActivatedResponse>> ActivateTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1ActivateSubscriptionRequest? tenantApiTenantV1ActivateSubscriptionRequest = default(TenantApiTenantV1ActivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->ActivateTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->ActivateTenantSubscriptionAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1ActivateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.ActivateTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TenantApiTenantV1SubscriptionActivatedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationCreatedResponse</returns>
        public ApplicationApiApplicationV2ApplicationCreatedResponse CreateTenantApplicationAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationCreatedResponse> localVarResponse = CreateTenantApplicationAsyncWithHttpInfo(tenantId, apiVersion, xVersion, applicationApiApplicationV2CreateApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationCreatedResponse> CreateTenantApplicationAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->CreateTenantApplicationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2CreateApplicationRequest;

            localVarRequestOptions.Operation = "TenantsApi.CreateTenantApplicationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationApiApplicationV2ApplicationCreatedResponse>("/tenants/{tenantId}/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantApplicationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationCreatedResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationCreatedResponse> CreateTenantApplicationAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationCreatedResponse> localVarResponse = await CreateTenantApplicationAsyncWithHttpInfoAsync(tenantId, apiVersion, xVersion, applicationApiApplicationV2CreateApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2CreateApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationCreatedResponse>> CreateTenantApplicationAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2CreateApplicationRequest? applicationApiApplicationV2CreateApplicationRequest = default(ApplicationApiApplicationV2CreateApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->CreateTenantApplicationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2CreateApplicationRequest;

            localVarRequestOptions.Operation = "TenantsApi.CreateTenantApplicationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationApiApplicationV2ApplicationCreatedResponse>("/tenants/{tenantId}/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantApplicationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantCreatedResponse</returns>
        public TenantApiTenantV1TenantCreatedResponse CreateTenantAsync(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantCreatedResponse> localVarResponse = CreateTenantAsyncWithHttpInfo(apiVersion, xVersion, tenantApiTenantV1CreateTenantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantCreatedResponse> CreateTenantAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1CreateTenantRequest;

            localVarRequestOptions.Operation = "TenantsApi.CreateTenantAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantApiTenantV1TenantCreatedResponse>("/tenants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantCreatedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1TenantCreatedResponse> CreateTenantAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantCreatedResponse> localVarResponse = await CreateTenantAsyncWithHttpInfoAsync(apiVersion, xVersion, tenantApiTenantV1CreateTenantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantCreatedResponse>> CreateTenantAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateTenantRequest? tenantApiTenantV1CreateTenantRequest = default(TenantApiTenantV1CreateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1CreateTenantRequest;

            localVarRequestOptions.Operation = "TenantsApi.CreateTenantAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantApiTenantV1TenantCreatedResponse>("/tenants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionCreatedResponse</returns>
        public TenantApiTenantV1SubscriptionCreatedResponse CreateTenantSubscriptionAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionCreatedResponse> localVarResponse = CreateTenantSubscriptionAsyncWithHttpInfo(tenantId, apiVersion, xVersion, tenantApiTenantV1CreateSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionCreatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionCreatedResponse> CreateTenantSubscriptionAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->CreateTenantSubscriptionAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1CreateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.CreateTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantApiTenantV1SubscriptionCreatedResponse>("/tenants/{tenantId}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionCreatedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionCreatedResponse> CreateTenantSubscriptionAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionCreatedResponse> localVarResponse = await CreateTenantSubscriptionAsyncWithHttpInfoAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1CreateSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1CreateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionCreatedResponse>> CreateTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1CreateSubscriptionRequest? tenantApiTenantV1CreateSubscriptionRequest = default(TenantApiTenantV1CreateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->CreateTenantSubscriptionAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1CreateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.CreateTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantApiTenantV1SubscriptionCreatedResponse>("/tenants/{tenantId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionDeactivatedResponse</returns>
        public TenantApiTenantV1SubscriptionDeactivatedResponse DeactivateTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionDeactivatedResponse> localVarResponse = DeactivateTenantSubscriptionAsyncAsyncWithHttpInfo(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1DeactivateSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionDeactivatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionDeactivatedResponse> DeactivateTenantSubscriptionAsyncAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeactivateTenantSubscriptionAsyncAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->DeactivateTenantSubscriptionAsyncAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1DeactivateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeactivateTenantSubscriptionAsyncAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TenantApiTenantV1SubscriptionDeactivatedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}/deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateTenantSubscriptionAsyncAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deactivate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionDeactivatedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionDeactivatedResponse> DeactivateTenantSubscriptionAsyncAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionDeactivatedResponse> localVarResponse = await DeactivateTenantSubscriptionAsyncAsyncWithHttpInfoAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1DeactivateSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeactivateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionDeactivatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionDeactivatedResponse>> DeactivateTenantSubscriptionAsyncAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeactivateSubscriptionRequest? tenantApiTenantV1DeactivateSubscriptionRequest = default(TenantApiTenantV1DeactivateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeactivateTenantSubscriptionAsyncAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->DeactivateTenantSubscriptionAsyncAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1DeactivateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeactivateTenantSubscriptionAsyncAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TenantApiTenantV1SubscriptionDeactivatedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}/deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeactivateTenantSubscriptionAsyncAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteApplicationAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0)
        {
            DeleteApplicationAsyncWithHttpInfo(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2DeleteApplicationRequest);
        }

        /// <summary>
        /// Delete a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteApplicationAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeleteApplicationAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->DeleteApplicationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2DeleteApplicationRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeleteApplicationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenantId}/applications/{applicationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApplicationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApplicationAsyncWithHttpInfoAsync(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2DeleteApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2DeleteApplicationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2DeleteApplicationRequest? applicationApiApplicationV2DeleteApplicationRequest = default(ApplicationApiApplicationV2DeleteApplicationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeleteApplicationAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->DeleteApplicationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2DeleteApplicationRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeleteApplicationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenantId}/applications/{applicationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApplicationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0)
        {
            DeleteTenantAsyncWithHttpInfo(tenantId, apiVersion, xVersion, tenantApiTenantV1DeleteTenantRequest);
        }

        /// <summary>
        /// Deletes a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteTenantAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeleteTenantAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1DeleteTenantRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeleteTenantAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenantId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantAsyncWithHttpInfoAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1DeleteTenantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteTenantAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteTenantRequest? tenantApiTenantV1DeleteTenantRequest = default(TenantApiTenantV1DeleteTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeleteTenantAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1DeleteTenantRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeleteTenantAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenantId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0)
        {
            DeleteTenantSubscriptionAsyncWithHttpInfo(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1DeleteSubscriptionRequest);
        }

        /// <summary>
        /// Deletes a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeleteTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->DeleteTenantSubscriptionAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1DeleteSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeleteTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenantId}/subscriptions/{subscriptionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantSubscriptionAsyncWithHttpInfoAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1DeleteSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1DeleteSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1DeleteSubscriptionRequest? tenantApiTenantV1DeleteSubscriptionRequest = default(TenantApiTenantV1DeleteSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->DeleteTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->DeleteTenantSubscriptionAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1DeleteSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.DeleteTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenantId}/subscriptions/{subscriptionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of Tenant Subscriptions 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel</returns>
        public TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel GetAllTenantSubscriptionsAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel> localVarResponse = GetAllTenantSubscriptionsAsyncWithHttpInfo(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of Tenant Subscriptions 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel> GetAllTenantSubscriptionsAsyncWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetAllTenantSubscriptionsAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetAllTenantSubscriptionsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel>("/tenants/{tenantId}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantSubscriptionsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of Tenant Subscriptions 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel> GetAllTenantSubscriptionsAsyncAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel> localVarResponse = await GetAllTenantSubscriptionsAsyncWithHttpInfoAsync(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of Tenant Subscriptions 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel>> GetAllTenantSubscriptionsAsyncWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetAllTenantSubscriptionsAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetAllTenantSubscriptionsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantApiTenantV1SubscriptionListResponsePaginatedItemsViewModel>("/tenants/{tenantId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantSubscriptionsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of tenants 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantListResponsePaginatedItemsViewModel</returns>
        public TenantApiTenantV1TenantListResponsePaginatedItemsViewModel GetAllTenantsAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel> localVarResponse = GetAllTenantsAsyncWithHttpInfo(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of tenants 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantListResponsePaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel> GetAllTenantsAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetAllTenantsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel>("/tenants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of tenants 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantListResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel> GetAllTenantsAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel> localVarResponse = await GetAllTenantsAsyncWithHttpInfoAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of tenants 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantListResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel>> GetAllTenantsAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetAllTenantsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantApiTenantV1TenantListResponsePaginatedItemsViewModel>("/tenants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationLauncherSettingsResponse</returns>
        public ApplicationApiApplicationV2ApplicationLauncherSettingsResponse GetTenantApplicationLauncherSettingsByIdAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse> localVarResponse = GetTenantApplicationLauncherSettingsByIdAsyncWithHttpInfo(tenantId, applicationId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationLauncherSettingsResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse> GetTenantApplicationLauncherSettingsByIdAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantApplicationLauncherSettingsByIdAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->GetTenantApplicationLauncherSettingsByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantApplicationLauncherSettingsByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse>("/tenants/{tenantId}/applications/{applicationId}/launchersettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantApplicationLauncherSettingsByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationLauncherSettingsResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse> GetTenantApplicationLauncherSettingsByIdAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse> localVarResponse = await GetTenantApplicationLauncherSettingsByIdAsyncWithHttpInfoAsync(tenantId, applicationId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationLauncherSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse>> GetTenantApplicationLauncherSettingsByIdAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantApplicationLauncherSettingsByIdAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->GetTenantApplicationLauncherSettingsByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantApplicationLauncherSettingsByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationApiApplicationV2ApplicationLauncherSettingsResponse>("/tenants/{tenantId}/applications/{applicationId}/launchersettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantApplicationLauncherSettingsByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationProfileResponse</returns>
        public ApplicationApiApplicationV2ApplicationProfileResponse GetTenantApplicationProfileByIdAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationProfileResponse> localVarResponse = GetTenantApplicationProfileByIdAsyncWithHttpInfo(tenantId, applicationId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationProfileResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationProfileResponse> GetTenantApplicationProfileByIdAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantApplicationProfileByIdAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->GetTenantApplicationProfileByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantApplicationProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationApiApplicationV2ApplicationProfileResponse>("/tenants/{tenantId}/applications/{applicationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantApplicationProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationProfileResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationProfileResponse> GetTenantApplicationProfileByIdAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationProfileResponse> localVarResponse = await GetTenantApplicationProfileByIdAsyncWithHttpInfoAsync(tenantId, applicationId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific application associated to a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationProfileResponse>> GetTenantApplicationProfileByIdAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantApplicationProfileByIdAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->GetTenantApplicationProfileByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantApplicationProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationApiApplicationV2ApplicationProfileResponse>("/tenants/{tenantId}/applications/{applicationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantApplicationProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of tenant applications 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel</returns>
        public EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel GetTenantApplicationsAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel> localVarResponse = GetTenantApplicationsAsyncWithHttpInfo(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of tenant applications 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel> GetTenantApplicationsAsyncWithHttpInfo(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantApplicationsAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantApplicationsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel>("/tenants/{tenantId}/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantApplicationsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of tenant applications 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel> GetTenantApplicationsAsyncAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel> localVarResponse = await GetTenantApplicationsAsyncWithHttpInfoAsync(tenantId, pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of tenant applications 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel>> GetTenantApplicationsAsyncWithHttpInfoAsync(string tenantId, int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantApplicationsAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantApplicationsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApplicationListResponseWithSubscriptionPaginatedItemsViewModel>("/tenants/{tenantId}/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantApplicationsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantProfileResponse</returns>
        public TenantApiTenantV1TenantProfileResponse GetTenantByIdAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantProfileResponse> localVarResponse = GetTenantByIdAsyncWithHttpInfo(tenantId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantProfileResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantProfileResponse> GetTenantByIdAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantApiTenantV1TenantProfileResponse>("/tenants/{tenantId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantProfileResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1TenantProfileResponse> GetTenantByIdAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantProfileResponse> localVarResponse = await GetTenantByIdAsyncWithHttpInfoAsync(tenantId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantProfileResponse>> GetTenantByIdAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantApiTenantV1TenantProfileResponse>("/tenants/{tenantId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionProfileResponse</returns>
        public TenantApiTenantV1SubscriptionProfileResponse GetTenantSubscriptionProfileByIdAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionProfileResponse> localVarResponse = GetTenantSubscriptionProfileByIdAsyncWithHttpInfo(tenantId, subscriptionId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionProfileResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionProfileResponse> GetTenantSubscriptionProfileByIdAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantSubscriptionProfileByIdAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->GetTenantSubscriptionProfileByIdAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantSubscriptionProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantApiTenantV1SubscriptionProfileResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantSubscriptionProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionProfileResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionProfileResponse> GetTenantSubscriptionProfileByIdAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionProfileResponse> localVarResponse = await GetTenantSubscriptionProfileByIdAsyncWithHttpInfoAsync(tenantId, subscriptionId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionProfileResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionProfileResponse>> GetTenantSubscriptionProfileByIdAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->GetTenantSubscriptionProfileByIdAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->GetTenantSubscriptionProfileByIdAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.GetTenantSubscriptionProfileByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantApiTenantV1SubscriptionProfileResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantSubscriptionProfileByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationPublishedResponse</returns>
        public ApplicationApiApplicationV2ApplicationPublishedResponse PublishTenantApplicationAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationPublishedResponse> localVarResponse = PublishTenantApplicationAsyncWithHttpInfo(tenantId, applicationId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationPublishedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationPublishedResponse> PublishTenantApplicationAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->PublishTenantApplicationAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->PublishTenantApplicationAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.PublishTenantApplicationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApplicationApiApplicationV2ApplicationPublishedResponse>("/tenants/{tenantId}/applications/{applicationId}/publish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishTenantApplicationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationPublishedResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationPublishedResponse> PublishTenantApplicationAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationPublishedResponse> localVarResponse = await PublishTenantApplicationAsyncWithHttpInfoAsync(tenantId, applicationId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a tenant&#39;s application 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationPublishedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationPublishedResponse>> PublishTenantApplicationAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->PublishTenantApplicationAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->PublishTenantApplicationAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "TenantsApi.PublishTenantApplicationAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApplicationApiApplicationV2ApplicationPublishedResponse>("/tenants/{tenantId}/applications/{applicationId}/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PublishTenantApplicationAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionRejectedResponse</returns>
        public TenantApiTenantV1SubscriptionRejectedResponse RejectTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionRejectedResponse> localVarResponse = RejectTenantSubscriptionAsyncWithHttpInfo(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1RejectSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionRejectedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionRejectedResponse> RejectTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->RejectTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->RejectTenantSubscriptionAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1RejectSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.RejectTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TenantApiTenantV1SubscriptionRejectedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionRejectedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionRejectedResponse> RejectTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionRejectedResponse> localVarResponse = await RejectTenantSubscriptionAsyncWithHttpInfoAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1RejectSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1RejectSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionRejectedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionRejectedResponse>> RejectTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1RejectSubscriptionRequest? tenantApiTenantV1RejectSubscriptionRequest = default(TenantApiTenantV1RejectSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->RejectTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->RejectTenantSubscriptionAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1RejectSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.RejectTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TenantApiTenantV1SubscriptionRejectedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tenant&#39;s application launcher settings 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        public ApplicationApiApplicationV2ApplicationUpdatedResponse UpdateTenantApplicationLauncherSettingsAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> localVarResponse = UpdateTenantApplicationLauncherSettingsAsyncWithHttpInfo(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tenant&#39;s application launcher settings 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationLauncherSettingsAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantApplicationLauncherSettingsAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->UpdateTenantApplicationLauncherSettingsAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantApplicationLauncherSettingsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApplicationApiApplicationV2ApplicationUpdatedResponse>("/tenants/{tenantId}/applications/{applicationId}/launchersettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantApplicationLauncherSettingsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tenant&#39;s application launcher settings 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationLauncherSettingsAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> localVarResponse = await UpdateTenantApplicationLauncherSettingsAsyncWithHttpInfoAsync(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tenant&#39;s application launcher settings 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse>> UpdateTenantApplicationLauncherSettingsAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest? applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest = default(ApplicationApiApplicationV2UpdateApplicationLauncherSettingsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantApplicationLauncherSettingsAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->UpdateTenantApplicationLauncherSettingsAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2UpdateApplicationLauncherSettingsRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantApplicationLauncherSettingsAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApplicationApiApplicationV2ApplicationUpdatedResponse>("/tenants/{tenantId}/applications/{applicationId}/launchersettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantApplicationLauncherSettingsAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tenant&#39;s application profile 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        public ApplicationApiApplicationV2ApplicationUpdatedResponse UpdateTenantApplicationProfileAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> localVarResponse = UpdateTenantApplicationProfileAsyncWithHttpInfo(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2UpdateApplicationProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tenant&#39;s application profile 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationProfileAsyncWithHttpInfo(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantApplicationProfileAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->UpdateTenantApplicationProfileAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2UpdateApplicationProfileRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantApplicationProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApplicationApiApplicationV2ApplicationUpdatedResponse>("/tenants/{tenantId}/applications/{applicationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantApplicationProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tenant&#39;s application profile 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationApiApplicationV2ApplicationUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationApiApplicationV2ApplicationUpdatedResponse> UpdateTenantApplicationProfileAsyncAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse> localVarResponse = await UpdateTenantApplicationProfileAsyncWithHttpInfoAsync(tenantId, applicationId, apiVersion, xVersion, applicationApiApplicationV2UpdateApplicationProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tenant&#39;s application profile 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="applicationId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="applicationApiApplicationV2UpdateApplicationProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationApiApplicationV2ApplicationUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<ApplicationApiApplicationV2ApplicationUpdatedResponse>> UpdateTenantApplicationProfileAsyncWithHttpInfoAsync(string tenantId, string applicationId, string? apiVersion = default(string?), string? xVersion = default(string?), ApplicationApiApplicationV2UpdateApplicationProfileRequest? applicationApiApplicationV2UpdateApplicationProfileRequest = default(ApplicationApiApplicationV2UpdateApplicationProfileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantApplicationProfileAsync");
            }

            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'applicationId' when calling TenantsApi->UpdateTenantApplicationProfileAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applicationId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = applicationApiApplicationV2UpdateApplicationProfileRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantApplicationProfileAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApplicationApiApplicationV2ApplicationUpdatedResponse>("/tenants/{tenantId}/applications/{applicationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantApplicationProfileAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1TenantUpdatedResponse</returns>
        public TenantApiTenantV1TenantUpdatedResponse UpdateTenantAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantUpdatedResponse> localVarResponse = UpdateTenantAsyncWithHttpInfo(tenantId, apiVersion, xVersion, tenantApiTenantV1UpdateTenantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1TenantUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantUpdatedResponse> UpdateTenantAsyncWithHttpInfo(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1UpdateTenantRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TenantApiTenantV1TenantUpdatedResponse>("/tenants/{tenantId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1TenantUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1TenantUpdatedResponse> UpdateTenantAsyncAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantUpdatedResponse> localVarResponse = await UpdateTenantAsyncWithHttpInfoAsync(tenantId, apiVersion, xVersion, tenantApiTenantV1UpdateTenantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a tenant 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateTenantRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1TenantUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1TenantUpdatedResponse>> UpdateTenantAsyncWithHttpInfoAsync(string tenantId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateTenantRequest? tenantApiTenantV1UpdateTenantRequest = default(TenantApiTenantV1UpdateTenantRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1UpdateTenantRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TenantApiTenantV1TenantUpdatedResponse>("/tenants/{tenantId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantApiTenantV1SubscriptionUpdatedResponse</returns>
        public TenantApiTenantV1SubscriptionUpdatedResponse UpdateTenantSubscriptionAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionUpdatedResponse> localVarResponse = UpdateTenantSubscriptionAsyncWithHttpInfo(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1UpdateSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantApiTenantV1SubscriptionUpdatedResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionUpdatedResponse> UpdateTenantSubscriptionAsyncWithHttpInfo(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->UpdateTenantSubscriptionAsync");
            }

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1UpdateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TenantApiTenantV1SubscriptionUpdatedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantApiTenantV1SubscriptionUpdatedResponse</returns>
        public async System.Threading.Tasks.Task<TenantApiTenantV1SubscriptionUpdatedResponse> UpdateTenantSubscriptionAsyncAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionUpdatedResponse> localVarResponse = await UpdateTenantSubscriptionAsyncWithHttpInfoAsync(tenantId, subscriptionId, apiVersion, xVersion, tenantApiTenantV1UpdateSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Tenant Subscription 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="tenantApiTenantV1UpdateSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantApiTenantV1SubscriptionUpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<TenantApiTenantV1SubscriptionUpdatedResponse>> UpdateTenantSubscriptionAsyncWithHttpInfoAsync(string tenantId, string subscriptionId, string? apiVersion = default(string?), string? xVersion = default(string?), TenantApiTenantV1UpdateSubscriptionRequest? tenantApiTenantV1UpdateSubscriptionRequest = default(TenantApiTenantV1UpdateSubscriptionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantsApi->UpdateTenantSubscriptionAsync");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new EdGraph.Management.Client.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling TenantsApi->UpdateTenantSubscriptionAsync");
            }


            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = tenantApiTenantV1UpdateSubscriptionRequest;

            localVarRequestOptions.Operation = "TenantsApi.UpdateTenantSubscriptionAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TenantApiTenantV1SubscriptionUpdatedResponse>("/tenants/{tenantId}/subscriptions/{subscriptionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantSubscriptionAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
