/*
 * Management Api
 *
 * Api to help platform wide items such as users, tenants, applications, subscriptions, etc.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdGraph.Management.Client.Client;
using EdGraph.Management.Client.Client.Auth;
using EdGraph.Management.Client.Model;

namespace EdGraph.Management.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiResourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new OpenId Api Resource
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse CreateApiResourceAsync(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0);

        /// <summary>
        /// Creates a new OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateApiResourceAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0);
        /// <summary>
        /// Adds or Updates an OpenId Api Resource
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse CreateOrUpdateApiResourceAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0);

        /// <summary>
        /// Adds or Updates an OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateOrUpdateApiResourceAsyncWithHttpInfo(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0);
        /// <summary>
        /// Deletes an OpenId Api Resource
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteApiResourceAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes an OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiResourceAsyncWithHttpInfo(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of OpenId Api Resources
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel</returns>
        EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel GetAllApiResourcesAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of OpenId Api Resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel</returns>
        ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel> GetAllApiResourcesAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific OpenId Api Resource
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse GetApiResourceByIdAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> GetApiResourceByIdAsyncWithHttpInfo(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiResourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateApiResourceAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>> CreateApiResourceAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds or Updates an OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateOrUpdateApiResourceAsyncAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds or Updates an OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>> CreateOrUpdateApiResourceAsyncWithHttpInfoAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiResourceAsyncAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiResourceAsyncWithHttpInfoAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of OpenId Api Resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel</returns>
        System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel> GetAllApiResourcesAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of OpenId Api Resources
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel>> GetAllApiResourcesAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> GetApiResourceByIdAsyncAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific OpenId Api Resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>> GetApiResourceByIdAsyncWithHttpInfoAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiResourcesApi : IApiResourcesApiSync, IApiResourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiResourcesApi : IApiResourcesApi
    {
        private EdGraph.Management.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiResourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiResourcesApi(string basePath)
        {
            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                new EdGraph.Management.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiResourcesApi(EdGraph.Management.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdGraph.Management.Client.Client.Configuration.MergeConfigurations(
                EdGraph.Management.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdGraph.Management.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApiResourcesApi(EdGraph.Management.Client.Client.ISynchronousClient client, EdGraph.Management.Client.Client.IAsynchronousClient asyncClient, EdGraph.Management.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdGraph.Management.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdGraph.Management.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdGraph.Management.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdGraph.Management.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse CreateApiResourceAsync(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> localVarResponse = CreateApiResourceAsyncWithHttpInfo(apiVersion, xVersion, edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateApiResourceAsyncWithHttpInfo(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest;

            localVarRequestOptions.Operation = "ApiResourcesApi.CreateApiResourceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>("/apiresources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiResourceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public async System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateApiResourceAsyncAsync(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> localVarResponse = await CreateApiResourceAsyncWithHttpInfoAsync(apiVersion, xVersion, edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>> CreateApiResourceAsyncWithHttpInfoAsync(string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsCreateApiResourceRequest;

            localVarRequestOptions.Operation = "ApiResourcesApi.CreateApiResourceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>("/apiresources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiResourceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or Updates an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse CreateOrUpdateApiResourceAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> localVarResponse = CreateOrUpdateApiResourceAsyncWithHttpInfo(apiResourceId, apiVersion, xVersion, edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds or Updates an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateOrUpdateApiResourceAsyncWithHttpInfo(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiResourceId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(apiResourceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest;

            localVarRequestOptions.Operation = "ApiResourcesApi.CreateOrUpdateApiResourceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>("/apiresources/{apiResourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateApiResourceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds or Updates an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public async System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> CreateOrUpdateApiResourceAsyncAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> localVarResponse = await CreateOrUpdateApiResourceAsyncWithHttpInfoAsync(apiResourceId, apiVersion, xVersion, edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds or Updates an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>> CreateOrUpdateApiResourceAsyncWithHttpInfoAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest? edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest = default(EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiResourceId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(apiResourceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }
            localVarRequestOptions.Data = edGraphHttpAggregatorsManagementApiControllersV1ViewModelsRequestsUpdateApiResourceRequest;

            localVarRequestOptions.Operation = "ApiResourcesApi.CreateOrUpdateApiResourceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>("/apiresources/{apiResourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateApiResourceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteApiResourceAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            DeleteApiResourceAsyncWithHttpInfo(apiResourceId, apiVersion, xVersion);
        }

        /// <summary>
        /// Deletes an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdGraph.Management.Client.Client.ApiResponse<Object> DeleteApiResourceAsyncWithHttpInfo(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiResourceId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(apiResourceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "ApiResourcesApi.DeleteApiResourceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/apiresources/{apiResourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiResourceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiResourceAsyncAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteApiResourceAsyncWithHttpInfoAsync(apiResourceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<Object>> DeleteApiResourceAsyncWithHttpInfoAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiResourceId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(apiResourceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "ApiResourcesApi.DeleteApiResourceAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/apiresources/{apiResourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteApiResourceAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of OpenId Api Resources 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel</returns>
        public EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel GetAllApiResourcesAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel> localVarResponse = GetAllApiResourcesAsyncWithHttpInfo(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of OpenId Api Resources 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel</returns>
        public EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel> GetAllApiResourcesAsyncWithHttpInfo(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "ApiResourcesApi.GetAllApiResourcesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel>("/apiresources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllApiResourcesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of OpenId Api Resources 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel</returns>
        public async System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel> GetAllApiResourcesAsyncAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel> localVarResponse = await GetAllApiResourcesAsyncWithHttpInfoAsync(pageSize, pageIndex, orderBy, filter, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of OpenId Api Resources 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to &quot;Name ASC&quot;)</param>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel>> GetAllApiResourcesAsyncWithHttpInfoAsync(int? pageSize = default(int?), int? pageIndex = default(int?), string? orderBy = default(string?), string? filter = default(string?), string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "ApiResourcesApi.GetAllApiResourcesAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponsePaginatedItemsViewModel>("/apiresources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllApiResourcesAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse GetApiResourceByIdAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> localVarResponse = GetApiResourceByIdAsyncWithHttpInfo(apiResourceId, apiVersion, xVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> GetApiResourceByIdAsyncWithHttpInfo(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0)
        {
            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiResourceId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(apiResourceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "ApiResourcesApi.GetApiResourceByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>("/apiresources/{apiResourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiResourceByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse</returns>
        public async System.Threading.Tasks.Task<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> GetApiResourceByIdAsyncAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse> localVarResponse = await GetApiResourceByIdAsyncWithHttpInfoAsync(apiResourceId, apiVersion, xVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific OpenId Api Resource 
        /// </summary>
        /// <exception cref="EdGraph.Management.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiResourceId"></param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="xVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse)</returns>
        public async System.Threading.Tasks.Task<EdGraph.Management.Client.Client.ApiResponse<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>> GetApiResourceByIdAsyncWithHttpInfoAsync(Guid apiResourceId, string? apiVersion = default(string?), string? xVersion = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdGraph.Management.Client.Client.RequestOptions localVarRequestOptions = new EdGraph.Management.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdGraph.Management.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("apiResourceId", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(apiResourceId)); // path parameter
            if (apiVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdGraph.Management.Client.Client.ClientUtils.ParameterToMultiMap("", "api-version", apiVersion));
            }
            if (xVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-version", EdGraph.Management.Client.Client.ClientUtils.ParameterToString(xVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "ApiResourcesApi.GetApiResourceByIdAsync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdGraphHttpAggregatorsManagementApiControllersV1ViewModelsResponsesApiResourceResponse>("/apiresources/{apiResourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApiResourceByIdAsync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
